def ssh = "ssh -o StrictHostKeyChecking=no sampe@1.2.3.4 -p 40022 "
def containerId

pipeline {
  agent any

  parameters {
    string(name: 'tag', defaultValue: '', description: 'docker registry image tag')
  }

  environment {
    APPLICATION_NAME = 'websocket'

    // ecr env
    REGISTRY = ''
    REGION = ''
  }

  stages {
    stage('Check') {
      steps {
        script {
          sh "echo tag: $tag"

          sshagent (credentials: ['ssh-agent-key']) {
            containerId = sh (
              script: "$ssh sudo docker ps -a | grep $APPLICATION_NAME | awk '{print \$1}'",
              returnStdout: true
            ).trim()

            if (containerId) {
              sh "echo containerId: $containerId"
            } else {
              sh "echo '$APPLICATION_NAME' is not running"
            }
          }
        }
      }
    }

    stage('Stop And Remove') {
      when { expression { containerId } }
      steps {
        sshagent (credentials: ['ssh-agent-key']) {
          sh "$ssh sudo docker stop $APPLICATION_NAME"
          sh "$ssh sudo docker rm $APPLICATION_NAME"
        }
      }
    }

    stage('Run') {
      steps {
        sshagent (credentials: ['ssh-agent-key']) {
          sh """
            $ssh sudo docker run -d --name $APPLICATION_NAME \
              -p 8081:8080 \
              --restart=always \
              --pull=always \
              $REGISTRY/$APPLICATION_NAME:$tag --spring.cloud.config.uri=http://1.2.3.4:8888
            """
        }
      }
    }

    stage('Prune Image') {
      steps {
        sshagent (credentials: ['ssh-agent-key']) {
          sh "$ssh yes | $ssh sudo docker image prune"
        }
      }
    }
  }

  post {
    success {
      slackSend (channel: '#slack_jenkins', color: '#00FF00', message: "Deploy Success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)")
    }
    failure {
      slackSend (channel: '#slack_jenkins', color: '#FF0000', message: "Deploy Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.JOB_URL}|Open>)")
    }
  }
}
